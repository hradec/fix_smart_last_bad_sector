#!/bin/bash 

export PATH=.:$(dirname $BASH_SOURCE):$PATH

while true ; do
cat /proc/partitions  | grep -v zd | awk '{print $(NF)}' | grep -v '....' | grep -v '^$' | while read p ; do 
        maxLBA=$(hdparm -I /dev/$p | grep LBA48 | awk '{print $(NF)}')

	# if the last test didn't finish, continue from the last tested LBA!
	ini=0
	inprogress=0
	if [ "$(smartctl -a /dev/$p | tee /dev/shm/smart$p  | egrep 'Self_test_in_progress|Self-test routine in progress|remaining.')" != "" ] ; then
			inprogress=1
	fi

	if [ "$(cat /dev/shm/smart$p | grep '# 1 ' | egrep 'Selective offline   Interrupted|Selective offline   Aborted by host')" != "" ] && [ "$inprogress" == 0 ] ; then
		lastTestedLBA=$( cat /dev/shm/smart$p | grep SPAN -A 1 | tail -1 | egrep 'Aborted_by_host|Interrupted' | awk '{print $(NF)}' | awk -F'(' '{print $2}' | awk -F'-' '{print $1}')
		let ini=$lastTestedLBA-16
		if [ $ini -eq -16 ] ; then
			lastTestedLBA=$( cat /dev/shm/smart$p | grep SPAN -A 1 | tail -1 | awk  '{print $2}' )
			let ini=$lastTestedLBA-16
		fi
	else
		if [ "$(cat /dev/shm/smart$p | grep '# 1 ' | egrep 'Completed: read failure')" != "" ] ; then
			if [ "$inprogress" == 0 ] ; then
				lastTestedLBA=$( cat /dev/shm/smart$p | grep '^# ' | grep 'Completed: read failure' | head -1 |  awk '{print $(NF)}' )
				echo $lastTestedLBA
				let ini=$lastTestedLBA-16
			fi
		fi
	fi

	cmd="smartctl -t selective,$ini-99999999999 /dev/$p"

	# only run the test if not in progress and fail last time
	if [ "$(cat /dev/shm/smart$p | egrep '# 1 ' | egrep 'Completed without error')" == "" ] && [ "$inprogress" == "0" ] ; then
		if [ "$ini" != "" ] ; then
			echo fixhdd.py -a -o $ini /dev/$p
			echo Yes | fixhdd.py -a -o $ini /dev/$p
		fi
		echo $cmd
		$cmd
	fi
	
	# or if we force it!
	if [ "$1" == "--force" ] ; then
		if [ "$ini" != "" ] ; then
			fixhdd.py -a -o $ini /dev/$p
		fi
		smartctl -X /dev/$p 
		echo $cmd
		$cmd
	fi

done
	echo "" > /dev/shm/lines
	cat /proc/partitions  | grep -v zd | awk '{print $(NF)}' | grep -v '....' | grep -v '^$' | while read p ; do
		echo ============================================================================================== >> /dev/shm/lines
		#smartctl -a /dev/$p 2>&1 > /dev/shm/$p
		cp /dev/shm/smart$p  /dev/shm/$p

		powerOnHours=$(cat /dev/shm/$p  | grep Power_On | awk '{print $(NF)}')

		echo "/dev/$p - PowerOnHours: $powerOnHours" >> /dev/shm/lines
		echo -n "    "
		cat /dev/shm/$p | egrep '# 1 ' >> /dev/shm/lines

		cat /dev/shm/$p | egrep 'Self_test_in_progress' | egrep -v '\-\-|# 2 ' | head -4 > /dev/shm/lines$p
		if [ "$(cat /dev/shm/lines$p)" == "" ] ; then
			cat /dev/shm/$p | egrep -A1 'Self-test routine in progress' | egrep -v '\-\-|# 2 |# 1 ' | head -4 > /dev/shm/lines$p
		fi

		if [ "$(cat /dev/shm/lines$p)" == "" ] ; then
			cat /dev/shm/$p | egrep 'remaining.' | egrep -v '\-\-|# 2 ' | head -4 > /dev/shm/lines$p
		fi

		percLine=$(cat /dev/shm/lines$p | grep left | grep '(')
		if [ "$percLine" != "" ] ; then
			#echo $percLine
			max=$(echo $percLine | awk '{print $3}')
			step=$(echo $percLine | awk '{print $(NF)}' | awk -F'-' '{print $1}' | awk -F'(' '{print $2}')
			perc=$(python2 -c "print '%0.01f%%' % (float($step) / float('$max') * 100)")
			extra=$(cat /dev/shm/lines$p | awk '{print $(NF)" / "$3" "$4}' )
			echo "    $perc done = $extra" >> /dev/shm/lines
		else
			cat /dev/shm/lines$p >> /dev/shm/lines
		fi
	done
	/usr/bin/tput reset
	echo "*********************************************************************************************"
	date
	cat /dev/shm/lines | grep -v Not_testing
	echo "*********************************************************************************************"
	sleep 30
done
